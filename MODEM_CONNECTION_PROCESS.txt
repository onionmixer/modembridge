# Modem Connection Process: From Startup to RING Handling and Answer

This document describes the complete process flow from program startup to handling incoming RING signals and modem answer processing.

## Program Overview

The modem sample program operates in two distinct modes:
- **HARDWARE Mode (S0=2)**: Modem automatically answers after 2 RING signals
- **SOFTWARE Mode (S0=0)**: Program monitors for 2 RINGs, then manually sends ATA command

## Key Files and Functions

### Core Files
- `modem_sample.c` - Main program logic and connection process
- `modem_sample.h` - Header definitions and function declarations
- `modem_control.c` - Modem AT command handling and control functions
- `serial_port.c` - Serial port communication and management
- `config.c` - Configuration file loading and management

### Key Functions by Module

#### Main Process (modem_sample.c)
- `main()` - Entry point and overall process orchestration
- `wait_for_ring()` - Core RING detection and answer monitoring
- `signal_handler()` - Cleanup and emergency shutdown
- `setup_signal_handlers()` - Signal handling setup

#### Modem Control (modem_control.c)
- `init_modem()` - Send modem initialization commands
- `set_modem_autoanswer()` - Configure S0 register for auto-answer
- `send_at_command()` - Generic AT command sender with response parsing
- `modem_answer_with_speed_adjust()` - Software mode manual answer (ATA)
- `verify_modem_readiness()` - Pre-connection modem validation
- `parse_connect_speed()` - Extract connection speed from CONNECT response

#### Serial Port (serial_port.c)
- `open_serial_port()` - Open and configure serial port
- `serial_read_line()` - Read complete lines with buffering
- `check_carrier_status()` - Monitor DCD (Data Carrier Detect)
- `adjust_serial_speed()` - Dynamic speed adjustment after connection

## Complete Connection Process Steps

### Phase 1: Program Initialization (modem_sample.c:241-277)

1. **Signal Handler Setup** (`setup_signal_handlers()`)
   - Register handlers for SIGINT, SIGTERM, SIGHUP
   - Ensures clean shutdown on interruption

2. **Configuration Loading** (`load_config()`)
   - Load from `modem_sample.conf` if available
   - Fall back to default configuration if file missing
   - Display configuration if verbose mode enabled

### Phase 2: Serial Port and Modem Setup (modem_sample.c:279-306)

3. **Serial Port Opening** (`open_serial_port()`)
   - Lock port to prevent conflicts
   - Configure for 8N1 raw mode
   - Set specified baudrate (default 4800)
   - Apply terminal attributes

4. **Modem Initialization** (`init_modem()`)
   - Send initialization command: `ATZ; AT&F Q0 V1 X4 &C1 &D2 S7=60 S10=120 S30=5`
   - Reset modem to factory settings
   - Configure response format and error handling
   - Set timeouts and carrier detection

5. **Auto-Answer Configuration** (`set_modem_autoanswer()`)
   - **HARDWARE Mode**: Send `ATE0 S0=2` (auto-answer after 2 rings)
   - **SOFTWARE Mode**: Send `ATE0 S0=0` (manual answer required)

### Phase 3: Connection Monitoring (modem_sample.c:308-391)

#### For HARDWARE Mode (S0=2):

6. **Modem Readiness Verification** (`verify_modem_readiness()`)
   - Check modem responsiveness with `AT` command
   - Verify S0 register is set to 2
   - Validate modem is ready for incoming calls

7. **Enhanced RING/CONNECT Monitoring** (`wait_for_ring()`)
   - Start monitoring serial port for RING signals
   - Track timing between RINGs (should be ~4-6 seconds apart)
   - Monitor for modem auto-answer after 2nd RING
   - Parse CONNECT response to detect connection speed
   - Handle connection errors (NO CARRIER, BUSY, ERROR)

#### For SOFTWARE Mode (S0=0):

6. **Manual RING Monitoring** (`wait_for_ring()`)
   - Monitor for exactly 2 RING signals
   - Count RING occurrences
   - Return when 2 RINGs detected for manual answering

7. **Manual Answer Command** (`modem_answer_with_speed_adjust()`)
   - Send `ATA` command to answer the call
   - Wait for CONNECT response
   - Parse connection speed from CONNECT message

### Phase 4: Connection Establishment (modem_sample.c:393-423)

8. **Dynamic Speed Adjustment** (`adjust_serial_speed()`)
   - Compare detected connection speed with configured speed
   - Adjust serial port baudrate to match actual connection
   - Prevent communication speed mismatches

9. **Carrier Detection Enable** (`enable_carrier_detect()`)
   - Enable DCD (Data Carrier Detect) monitoring
   - Configure hardware flow control (RTS/CTS)
   - Allows detection of connection drops

10. **Connection Stabilization**
    - Wait 10 seconds for connection to stabilize
    - Additional 500ms delay for client readiness
    - Ensures both modems are synchronized

### Phase 5: Data Transmission (modem_sample.c:424-476)

11. **First Message Transmission**
    - Verify carrier status before sending
    - Send "first\r\n" using robust transmission
    - Log transmission if enabled
    - Handle partial writes and retries

12. **Inter-Transmission Delay**
    - Wait 5 seconds between messages
    - Verify carrier is still present
    - Ensure connection stability

13. **Second Message Transmission**
    - Send "second\r\n" using robust transmission
    - Apply same error handling and retry logic
    - Log transmission details

### Phase 6: Connection Termination (modem_sample.c:477-501)

14. **Modem Hangup** (`modem_hangup()`)
    - Send `ATH` command to disconnect
    - Perform DTR drop for hardware hangup
    - Flush buffers and restore settings

15. **Cleanup**
    - Close serial port
    - Unlock port resources
    - Report completion status

## Detailed RING Handling Process

### RING Detection Algorithm (wait_for_ring function)

The RING detection process works as follows:

1. **Buffer Management**: Uses internal buffering to handle fragmented RING signals
2. **Timeout Handling**: Monitors both overall timeout and inter-RING timeout
3. **Pattern Recognition**: Detects "RING" strings in incoming data
4. **Counting Logic**: Tracks RING count based on mode

#### HARDWARE Mode Flow:
```
Wait for RING #1 → Log timing → Wait for RING #2 → Expect auto-answer → Wait for CONNECT
```

#### SOFTWARE Mode Flow:
```
Wait for RING #1 → Wait for RING #2 → Return for manual ATA → Send ATA → Wait for CONNECT
```

### Connection Speed Detection

The program parses CONNECT responses in various formats:
- `CONNECT 1200`
- `CONNECT 2400/ARQ`
- `CONNECT 9600/V42`
- `CONNECT` (assumes 300 bps for legacy modems)

Speed detection allows dynamic adjustment of serial port speed to match the actual modem connection speed.

## Error Handling and Recovery

### Common Error Scenarios

1. **Timeout Errors**:
   - No RING received within configured timeout
   - RINGs received but no CONNECT response
   - Recovery: Attempt to clear modem hang condition

2. **Modem Errors**:
   - NO CARRIER, BUSY, ERROR responses
   - Recovery: Reset modem and reconfigure

3. **Serial Port Errors**:
   - Port locked by another process
   - Communication failures
   - Recovery: Check process status and remove stale locks

### Validation and Monitoring

1. **Pre-Connection Validation**:
   - Verify modem responsiveness
   - Check S0 register configuration
   - Confirm readiness for incoming calls

2. **Post-Connection Validation**:
   - Monitor carrier signal quality
   - Validate connection stability
   - Check for error indicators

3. **Continuous Monitoring**:
   - Carrier status checks before transmission
   - Error detection during data transfer
   - Automatic recovery attempts

## Configuration Parameters

Key configuration settings affecting the connection process:

- `autoanswer_mode`: 0=SOFTWARE, 1=HARDWARE
- `ring_wait_timeout`: Maximum time to wait for RING (default 60s)
- `connect_timeout`: Time to wait for CONNECT after RINGs (default 30s)
- `at_command_timeout`: AT command response timeout (default 5s)
- `enable_connection_validation`: Post-connection validation (default enabled)
- `enable_error_recovery`: Automatic error recovery (default enabled)

## Timing Considerations

- **RING Interval**: Typically 4-6 seconds between RINGs
- **Answer Timing**: Hardware auto-answer occurs immediately after 2nd RING
- **Stabilization**: 10 seconds + 500ms for connection stabilization
- **Transmission Gap**: 5 seconds between message transmissions

This comprehensive process ensures reliable modem communication with proper error handling, validation, and recovery mechanisms suitable for MBSE BBS-inspired operations.